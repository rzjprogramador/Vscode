{
  "import_LogConsole_RZJ": {
    "prefix": "import_LogConsole_RZJ",
    "body": [
      "import { Log } from \"/home/rzj/..gitAll/rzModulesTS_FIXOPC/modules/LogConsole/index.ts\";"
    ],
    "description": "import_LogConsole_RZJ"
  },
  "consoleLogRZJ": {
    "prefix": "consoleLogRZJ",
    "body": [
      "Log(\"${1:foo}: \", ${1:foo})"
    ],
    "description": "consoleLogRZJ"
  },
  "consoleLog": {
    "prefix": "consoleLog",
    "body": [
      "console.log(\"${1:foo}: \", ${1:foo})"
    ],
    "description": "consoleLog Original"
  },
  "deps": {
    "prefix": "deps",
    "body": [
      "/**",
      " * DEPS ENTITY >> $1",
      " */",
      "",
      "// export * from \".\""
    ],
    "description": "deps"
  },
  "Comentarios_comments_JsTs": {
  "prefix": "Comentarios_comments_JsTs",
  "body": [
    "/**",
    " * $1",
    " *",
    " */"
  ],
  "description": "Comentarios_comments_JsTs"
},
  "export_scope_ts": {
    "prefix": "export_scope_ts",
    "body": [
      "export { type MeuTipo1, type MeuTipo2, minhaConstante, funcao, default as mudavelNaImportacao }"
    ],
    "description": "export_scope_ts"
  },
  "imports_global": {
    "prefix": "imports_global",
    "body": [
      "\"@global\""
    ],
    "description": "imports_global"
  },
  "imports_rzModulesTS": {
    "prefix": "imports_rzModulesTS",
    "body": [
      "\"@rzModulesTS\""
    ],
    "description": "imports_clienteFisico"
  },
  "imports_clienteFisico": {
    "prefix": "imports_clienteFisico",
    "body": [
      "\"@clienteFisico\""
    ],
    "description": "imports_clienteFisico"
  },
  "model_class_custom_error_ts": {
    "prefix": "model_class_custom_error_ts",
    "body": [
      "export class $1InvalidEntity extends Error {",
      "  constructor(msg: string) {",
      "    super(`\\${msg}`);",
      "    this.name = `InvalidEntity`;",
      "  }",
      "}"
    ],
    "description": "model_class_custom_error_ts"
  },
  "jsdoc doc ": {
    "prefix": "jsdoc doc",
    "body": [
      "/**",
      " * @description este metodo faz ...",
      " * @param param0 $1 1º { texto, numero }",
      " * @returns TipoRetorno",
      " * @exemple funcaoNome ({ texto: 'foo', numero: 10 })",
      " */",
      ""
    ],
    "description": "jsdoc doc "
  },
  "test_deno_completo": {
    "prefix": "test_deno_completo",
    "body": [
      "// deno-lint-ignore-file no-explicit-any no-unused-vars",
      "import { expect } from \"https://deno.land/x/expect@v0.2.10/expect.ts\";",
      "import { Log } from \"/home/rzj/..gitAll/rzModulesTS/_subir_mods_ts/LogConsole/index.ts\";",
      "",
      "",
      "const sut = (d: any) => d",
      "const inputSut = 'foo'",
      "",
      "Deno.test({",
      "  name: \"deve retornar \",",
      "  only: false,",
      "  async fn() {",
      "    // const input = inputSut;",
      "    // const where = await sut(input);",
      "    // const assertion = undefined;",
      "    // Log('  >>>>>>> ', where)",
      "    // expect(where).toEqual(assertion);",
      "  },",
      "",
      "});",
      "",
      "Deno.test(\"[ deve retornar \", () => {",
      "  const input = inputSut;",
      "  const where = sut(input);",
      "  const assertion: any = \"foo\";",
      "  // Log('  >>>>>>> ', where)",
      "  expect(where).toEqual(assertion);",
      "});",
      "",
      "/* TESTER_CONSOLE ************************************* */",
      "",
      "async function tester_ () {",
      "  const res = await sut(inputSut);",
      "  res.then(d => Log(d))",
      "  // res.then(d => console.log(d))",
      "}",
      "tester_ ();",
      "",
      "/*",
      "* PARA RODAR ONLY SÓ ESTE TEST ```deno test <caminhoDesteArquivo>```",
      "*/",
      "",
      "export default 1;",
      ""
    ],
    "description": "test_deno_completo"
  },
  "test_deno_SUITE_suite": {
    "prefix": "test_deno_SUITE_suite",
    "body": [
      "Deno.test({",
      "  name: \"deve retornar \",",
      "  only: false,",
      "  async fn() {",
      "    // const input = inputSut;",
      "    // const where = await sut(input);",
      "    // const assertion = undefined;",
      "    // Log('  >>>>>>> ', where)",
      "    // expect(where).toEqual(assertion);",
      "  },",
      "",
      "});"
    ],
    "description": "test_deno_SUITE_suite"
  },
  "deno_test_import_expect": {
    "prefix": "deno_test_import_expect",
    "body": [
      "import { expect } from \"https://deno.land/x/expect@v0.2.10/expect.ts\";"
    ],
    "description": "deno_test_import_expect"
  },
  "ignore_ts_erros": {
    "scope": "javascript,typescript",
    "prefix": "ignore_ts_erros",
    "body": [
      "//@ts-ignore"
    ],
    "description": "ignore_ts_erros"
  },
  "comment_oficial": {
    "scope": "javascript,typescript",
    "prefix": "comment_oficial",
    "body": [
      "/**",
      " * $0",
      " */"
    ],
    "description": "comment_oficial"
  },

  "auto export classe controller": {
    "scope": "javascript,typescript",
    "prefix": "auto export classe controller",
    "body": [
      "export default new ${1}()"
    ],
    "description": "auto export classe controller"
  },
  "divid": {
    "scope": "javascript,typescript",
    "prefix": "divid",
    "body": [
      "",
      "/* ---------------------- // ---------------------- */",
      "/* $0 */",
      "//"
    ],
    "description": "divid"
  },
  "tipagem js": {
    "scope": "javascript,typescript",
    "prefix": "type",
    "body": [
      "/**",
      " * descricao :: $0",
      " * @param {$1} $2 ",
      " * @param {string} nomeParam // exemplo",
      " */",
      "",
      ""
    ],
    "description": "tipagem js"
  },
  "metodo__interface--ts": {
    "scope": "javascript,typescript",
    "prefix": "metodo__interface--ts",
    "body": [
      "async ${1:metodo}: () => Promise<${2: tipo}[]>"
    ],
    "description": "method__interface--ts"
  },
  "metodo__classe--ts": {
    "scope": "javascript,typescript",
    "prefix": "metodo__classe--ts",
    "body": [
      "async ${1:metodo}(): Promise<${2: tipo}[]> {}"
    ],
    "description": "method__interface--ts"
  },
  //
  "tester_test_node_rzj": {
    "scope": "javascript,typescript",
    "prefix": "tester test node",
    "body": [
      "// import { test } from 'node:test'",
      "import assert from 'assert'",
      "import { vi, describe, it, test } from 'vitest'",
      "",
      "const makeSut = null",
      "const makeFakeEntityInstanceOne = null",
      "const makeFakeEntityInstanceTwo = null",
      "",
      "describe('_ >> [Sucess]', () => {",
      "const sut = makeSut",
      "",
      "test(`deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// console.log('OBJ CRIADO >> ', current)",
      "// console.log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})",
      "",
      "})",
      "",
      "describe.todo('_ >> [Fail]', () => {",
      "const sut = makeSut",
      "",
      "test(`nao deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// console.log('OBJ CRIADO >> ', current)",
      "// console.log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})",
      "",
      "})",
      ""
    ],
    "description": "test tester node"
  },
  "describe_fail_tester": {
    "scope": "javascript,typescript",
    "prefix": "describe fail tester",
    "body": [
      "describe.todo('_ >> [Fail]', () => {",
      "const sut = makeSut",
      "",
      "test(`nao deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// console.log('OBJ CRIADO >> ', current)",
      "// console.log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})",
      "",
      "})"
    ],
    "description": "describe_fail_tester"
  },
  "describe_sucess_tester": {
    "scope": "javascript,typescript",
    "prefix": "describe sucess tester",
    "body": [
      "describe('_ >> [Sucess]', () => {",
      "  const sut = makeSut",
      "  ",
      "  test(`deve _.`, async () => {",
      "  const current = null",
      "  const expected = null",
      "  // console.log('OBJ CRIADO >> ', current)",
      "  // console.log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "  assert(expected === true)",
      "  })",
      "  ",
      "  })"
    ],
    "description": "describe_sucess_tester"
  },
  "suite_test_it": {
    "scope": "javascript,typescript",
    "prefix": "suite test it",
    "body": [
      "test(`deve _.`, async () => {",
      "const current = null",
      "const expected = null",
      "// console.log('OBJ CRIADO >> ', current)",
      "// console.log('A RESPOSTA DA EXPECTATIVA SERÁ >> ', expected)",
      "assert(expected === true)",
      "})"
    ],
    "description": "suite_test_it"
  },
  //
  "export-modulo-classe__JS": {
    "scope": "javascript,typescript",
    "prefix": "export-modulo-classe__JS",
    "body": [
      "class ${1:modulo} {",
      "    constructor() {}",
      "}",
      "",
      "module.exports = ${1:modulo}"
    ],
    "description": "export-modulo-classe__JS"
  },
  "comment": {
    "prefix": "comment",
    "body": [
      "/*",
      "* $0",
      "*/"
    ],
    "description": "comment"
  },
  "class": {
    "prefix": "export class - typescript",
    "scope": "javascript,typescript",
    "body": [
      "export class ${TM_DIRECTORY/^.+\\\\/(.*)$/$1/}$1 {",
      "    constructor() {}",
      "}"
    ],
    "description": "class"
  },
  "interface": {
    "prefix": "export interface - typescript",
    "scope": "javascript,typescript",
    "body": [
      "export interface ${TM_DIRECTORY/^.+\\\\/(.*)$/$1/}$1 {$2}"
    ],
    "description": "interface"
  },
  "requisito": {
    "prefix": "requisito",
    "body": [
      "## API : $1",
      "",
      "## REQUISITOS",
      "- [] Deve ser possivel ",
      "",
      "",
      "## REGRAS DE NEGOCIO",
      "- [] Não Deve ser possivel "
    ],
    "description": "requisito"
  },
  "noExport": {
    "prefix": "noExport",
    "scope": "javascript,typescript",
    "body": [
      "",
      "/* ---------------------- // ---------------------- */",
      "",
      "export default 1",
    ],
    "description": "noExport"
  }
}